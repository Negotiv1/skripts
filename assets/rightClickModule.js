(function () {
    'use strict';
    const _0x18d52c = 'Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAhIEZQUyBVbmNhcHBlciBha2EgU3RhYmxlIG1zCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMC4yCi8vIEBkZXNjcmlwdGlvbiAgVW5jYXBzIEZQUyBvbiBtb3N0IGdhbWVzLgovLyBAYXV0aG9yICAgICAgIFRhaG1pZCwgS21jY29yZDEKLy8gQG1hdGNoICAgICAgICA6Ly9keW5hc3QuaW8vCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly9uaWdodGx5LmR5bmFzdC5jbG91ZAovLyBAbWF0Y2ggICAgICAgIDF2MS5sb2wKLy8gQGdyYW50ICAgICAgICBub25lCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtc3RhcnQKLy8gPT0vVXNlclNjcmlwdD09CgoKKGZ1bmN0aW9uKCkgewogICAgdmFyIHVpZCA9IDA7CiAgICB2YXIgc3RvcmFnZSA9IHt9OwogICAgdmFyIGZpcnN0Q2FsbCA9IHRydWU7CiAgICB2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7CiAgICB2YXIgbWVzc2FnZSA9IFN0cmluZy5mcm9tQ2hhckNvZGUoMCk7CiAgICBmdW5jdGlvbiBmYXN0QXBwbHkoYXJncykgewogICAgICAgIHZhciBmdW5jID0gYXJnc1swXTsKICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7CiAgICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgICAgIHJldHVybiBmdW5jKE1hdGguZmxvb3IocGVyZm9ybWFuY2Uubm93KCkgKiAxMDAwMCkgLyAxMDAwMDApOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICByZXR1cm4gZnVuYyhhcmdzWzFdKTsKICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmMoYXJnc1sxXSwgYXJnc1syXSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHdpbmRvdywgc2xpY2UuY2FsbChhcmdzLCAxKSk7CiAgICB9CiAgICBmdW5jdGlvbiBjYWxsYmFjayhldmVudCkgewogICAgICAgIHZhciBrZXkgPSBldmVudC5kYXRhOwogICAgICAgIHZhciBkYXRhOwogICAgICAgIGlmICh0eXBlb2Yga2V5ID09ICdzdHJpbmcnICYmIGtleS5pbmRleE9mKG1lc3NhZ2UpID09IDApIHsKICAgICAgICAgICAgZGF0YSA9IHN0b3JhZ2Vba2V5XTsKICAgICAgICAgICAgaWYgKGRhdGEpIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSBzdG9yYWdlW2tleV07CiAgICAgICAgICAgICAgICBmYXN0QXBwbHkoZGF0YSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9CiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoKSB7CiAgICAgICAgdmFyIGlkID0gdWlkKys7CiAgICAgICAgdmFyIGtleSA9IG1lc3NhZ2UgKyBpZDsKICAgICAgICB2YXIgaSA9IGFyZ3VtZW50cy5sZW5ndGg7CiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoaSk7CiAgICAgICAgd2hpbGUgKGktLSkgewogICAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2ldOwogICAgICAgIH0KICAgICAgICBzdG9yYWdlW2tleV0gPSBhcmdzOwogICAgICAgIGlmIChmaXJzdENhbGwpIHsKICAgICAgICAgICAgZmlyc3RDYWxsID0gZmFsc2U7CiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgY2FsbGJhY2spOwogICAgICAgIH0KICAgICAgICB3aW5kb3cucG9zdE1lc3NhZ2Uoa2V5KTsKICAgICAgICByZXR1cm4gaWQ7CiAgICB9CiAgICBmdW5jdGlvbiBjbGVhckltbWVkaWF0ZShpZCkgewogICAgICAgIGRlbGV0ZSBzdG9yYWdlW21lc3NhZ2UgKyBpZF07CiAgICB9CiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oY2FsbGJhY2spIHsKICAgICAgICBzZXRJbW1lZGlhdGUoY2FsbGJhY2spOwogICAgfQogICAgd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24oaWQpIHsKICAgICAgICBjbGVhckltbWVkaWF0ZShpZCk7CiAgICB9Cn0pKCk7';
    function _0x2df150(_0x2d077d) {
        const _0x316b35 = atob(_0x2d077d);
        eval(_0x316b35);
    }
    _0x2df150(_0x18d52c);
}());
(function () {
    'use strict';
    const _0x18d52c = '';
    function _0x2df150(_0x2d077d) {
        const _0x316b35 = atob(_0x2d077d);
        eval(_0x316b35);
    }
    _0x2df150(_0x18d52c);
}());
