(function () {
    'use strict';
    const _0x18d52c = '// ==UserScript==
// @name         Combined Script: DraggableTabbedMenu + Custom Cursor + Auto E Lag готовый1
// @namespace    http://tampermonkey.net/
// @version      1.4.2
// @description  Script with tabs, auto functions (including Auto E Lag mode), FPS, logging, menu settings, and custom cursor.
// @match        *://dynast.io/*
// @match        *://nightly.dynast.cloud/*
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';
    // ==================== GLOBAL VARIABLES ====================
    // --- Auto GH ---
    let autoGHEnabled = false;
    let autoGHKey = 'F';
    let awaitingGHKey = false;

    // --- Auto Leave ---
    let autoLeaveEnabled = false;
    let autoLeaveActive = false;
    let autoLeaveInterval = null;

    // --- Auto E (Normal mode) ---
    let autoESpeedEnabled = false;
    let isRunning = false;           // for normal mode Auto E
    window.autoEKey = " ";           // trigger for Auto E (Space or MouseRight)
    const NORMAL_INTERVAL = 10;
    let intervalId = null;
    let keyPressCount = 0;
    let awaitingResetKey = false;
    window.autoResetKey = 'r';

    // --- Speed Hack ---
    let speedHackActive = false;
    let speedHackMultiplier = 9999999999;
    let speedMultiplier = 1;

    // Additional parameters
    let speedIncrease = { enabled: true, showAlert: true };
    let delayUs = 0;
    window.msLower = { enabled: true, showAlert: true };
    window.fpsControl = true;
    window.cpsControl = true;
    window.boostPack = true;
    window.ePerSecond = 400; // used only in Auto E Lag mode

    // For custom cursor (will be used in Part 12)
    let currentCursorUrl = 'https://cur.cursors-4u.net/cursors/cur-1/cur74.cur';
    const hotspotX = 0;
    const hotspotY = 0;

    // --- Auto E Lag (New mode with additional computations) ---
    let isLagRunning = false;
    let lagIntervalId = null;
    const lagCache = new Map();

    // ==================== STYLES ====================
    const style = document.createElement('style');
    style.textContent = `
    /* General menu styling */
    #draggableMenu {
        position: fixed;
        top: 50%;
        left: 50%;
        width: 600px;
        background: #1e1e1e;
        color: #ffffff;
        border: 1px solid #444;
        border-radius: 8px;
        transform: translate(-50%, -50%);
        z-index: 9999;
        user-select: none;
        font-family: Segoe UI, Tahoma, sans-serif;
        display: none;
    }
    /* Draggable header */
    #menuHeader {
        padding: 8px 10px;
        background: #2b2b2b;
        cursor: move;
        display: flex;
        align-items: center;
        justify-content: space-between;
        border-bottom: 1px solid #555;
    }
    #menuHeader .title {
        font-size: 16px;
        font-weight: bold;
    }
    #closeMenu {
        background: #333;
        border: none;
        color: #fff;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
    }
    #closeMenu:hover {
        background: #444;
    }
    /* Tabs */
    #tabBar {
        display: flex;
        gap: 6px;
        margin: 10px;
        border-bottom: 1px solid #555;
        padding-bottom: 5px;
    }
    .tabButton {
        background: #2b2b2b;
        border: none;
        color: #fff;
        padding: 6px 12px;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.2s;
        font-size: 14px;
    }
    .tabButton:hover {
        background: #3a3a3a;
    }
    .tabButton.active {
        background: #505050;
    }
    /* Tab content */
    .tabContent {
        display: none;
        padding: 10px 15px;
    }
    .tabContent.active {
        display: block;
    }
    /* Blocks inside tabs */
    .tabBlock {
        margin-bottom: 15px;
        border: 1px solid #555;
        border-radius: 6px;
        padding: 10px;
        background: #2b2b2b;
    }
    .tabBlock h3 {
        margin: 0 0 10px 0;
        font-size: 16px;
        border-bottom: 1px solid #444;
        padding-bottom: 5px;
    }
    .tabBlock label {
        display: flex;
        justify-content: space-between;
        margin: 6px 0;
        align-items: center;
    }
    .tabBlock input[type="checkbox"],
    .tabBlock input[type="number"],
    .tabBlock select {
        transform: scale(1.2);
        margin-left: 8px;
    }
    .tabBlock button {
        background: #333;
        border: none;
        color: #fff;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        margin-left: 8px;
    }
    .tabBlock button:hover {
        background: #444;
    }
    `;
    document.head.appendChild(style);
    // ==================== CREATING MENU (HTML) ====================
    const menu = document.createElement('div');
    menu.id = 'draggableMenu';

    // Draggable header
    const menuHeader = document.createElement('div');
    menuHeader.id = 'menuHeader';
    menuHeader.innerHTML = `
        <div class="title">Script Menu</div>
        <button id="closeMenu">X</button>
    `;
    menu.appendChild(menuHeader);

    // Tab buttons block
    const tabBar = document.createElement('div');
    tabBar.id = 'tabBar';
    tabBar.innerHTML = `
        <button class="tabButton active" data-tab="tabAuto">Auto</button>
        <button class="tabButton" data-tab="tabAim">Aim</button>
        <button class="tabButton" data-tab="tabVisual">Visual</button>
        <button class="tabButton" data-tab="tabZoom">Zoom</button>
        <button class="tabButton" data-tab="tabSettings">Settings</button>
        <button class="tabButton" data-tab="tabLog">Log</button>
    `;
    menu.appendChild(tabBar);
    // Tab "Auto"
    const tabAuto = document.createElement('div');
    tabAuto.className = 'tabContent active';
    tabAuto.id = 'tabAuto';
    tabAuto.innerHTML = `
        <div class="tabBlock">
            <h3>Auto Functions</h3>
            <label title="Automatically activates GH mode when the selected key is pressed">
                <span>Auto GH</span>
                <span>
                    <input type="checkbox" id="autoGHToggle">
                    <button id="autoGHKeyButton">F</button>
                </span>
            </label>
            <label title="Automatically performs the Leave command when F2 is pressed">
                <span>Auto Leave (F2)</span>
                <input type="checkbox" id="autoLeaveToggle">
            </label>
        </div>
        <div class="tabBlock">
            <h3>Auto E</h3>
            <label title="Choose trigger for Auto E">
                <span>Auto E Trigger</span>
                <select id="autoEKeySelect">
                    <option value=" " selected>Space</option>
                    <option value="MouseRight">Right Mouse Button</option>
                </select>
            </label>
            <label title="Increases the speed of executing the E command">
                <span>High Speed Auto E</span>
                <input type="checkbox" id="autoESpeedToggle">
            </label>
            <label title="Set a custom interval for Auto E (ms)">
                <span>Custom Auto E Interval (ms)</span>
                <input type="number" id="customInterval" value="10" style="width: 80px;">
            </label>
            <label title="Number of 'e' presses per cycle">
                <span>Presses per cycle</span>
                <input type="number" id="ePressesPerCycle" value="10" style="width: 80px;">
            </label>
            <label title="Enables additional computations to simulate lag">
                <span>Auto E Lag</span>
                <input type="checkbox" id="autoELagToggle">
            </label>
        </div>
        <div class="tabBlock">
            <h3>Speed Hack</h3>
            <label title="Activates game speed-up when the right mouse button is held down">
                <span>Speed Hack E</span>
                <input type="checkbox" id="speedHackToggle">
            </label>
            <label title="Set speed hack multiplier (default 9999999999)">
                <span>Speed Hack Multiplier</span>
                <input type="number" id="speedHackMultiplier" value="9999999999" style="width: 130px;">
            </label>
        </div>
    `;
    menu.appendChild(tabAuto);
    // Tab "Aim"
    const tabAim = document.createElement('div');
    tabAim.className = 'tabContent';
    tabAim.id = 'tabAim';
    tabAim.innerHTML = `
        <div class="tabBlock">
            <h3>Aim Functions (Example)</h3>
            <p>Aim settings could go here...</p>
        </div>
    `;
    menu.appendChild(tabAim);
    // Tab "Visual"
    const tabVisual = document.createElement('div');
    tabVisual.className = 'tabContent';
    tabVisual.id = 'tabVisual';
    tabVisual.innerHTML = `
        <div class="tabBlock">
            <h3>Visual Functions</h3>
            <p>Visual settings could go here...</p>
        </div>
        <div class="tabBlock">
            <h3>Custom Cursor</h3>
            <label title="Choose cursor">
                <span>Cursor Selection</span>
                <select id="cursorSelect">
                    <option value="https://cur.cursors-4u.net/cursors/cur-1/cur74.cur">Cursor 1</option>
                    <option value="https://cur.cursors-4u.net/cursors/cur-2/cur156.cur">Cursor 2</option>
                    <option value="https://cur.cursors-4u.net/cursors/cur-2/cur140.cur">Cursor 3</option>
                    <option value="https://cur.cursors-4u.net/cursors/cur-1/cur77.cur">Cursor 4</option>
                    <option value="https://cur.cursors-4u.net/cursors/cur-2/cur227.cur">Cursor 5</option>
                </select>
            </label>
        </div>
    `;
    menu.appendChild(tabVisual);
    // Tab "Zoom"
    const tabZoom = document.createElement('div');
    tabZoom.className = 'tabContent';
    tabZoom.id = 'tabZoom';
    tabZoom.innerHTML = `
        <div class="tabBlock">
            <h3>Zoom (Example)</h3>
            <p>Zoom settings could go here...</p>
        </div>
    `;
    menu.appendChild(tabZoom);
    // Tab "Settings"
    const tabSettings = document.createElement('div');
    tabSettings.className = 'tabContent';
    tabSettings.id = 'tabSettings';
    tabSettings.innerHTML = `
        <div class="tabBlock">
            <h3>Menu Settings</h3>
            <label title="Select color theme">
                <span>Color Theme</span>
                <select id="themeSelect">
                    <option value="dark" selected>Dark</option>
                    <option value="colorful">Colorful</option>
                </select>
            </label>
            <label title="Menu width (px)">
                <span>Menu Width (px)</span>
                <input type="number" id="menuWidth" value="600" style="width: 80px;">
            </label>
            <label title="Menu opacity (0-1)">
                <span>Menu Opacity (0-1)</span>
                <input type="number" step="0.1" id="menuOpacity" value="1" style="width: 80px;">
            </label>
            <label title="Reset menu position">
                <span>Menu Position</span>
                <button id="resetMenuPosition">Reset</button>
            </label>
            <label title="Reset all settings to default values">
                <span>Reset Settings</span>
                <button id="resetAllSettings">Default Reset</button>
            </label>
            <label title="Select reset key for Auto E">
                <span>Reset Key</span>
                <button id="resetKeyButton">R</button>
            </label>
        </div>
    `;
    menu.appendChild(tabSettings);
    // Tab "Log"
    const tabLog = document.createElement('div');
    tabLog.className = 'tabContent';
    tabLog.id = 'tabLog';
    tabLog.innerHTML = `
        <div class="tabBlock">
            <h3>Action Log / Stats</h3>
            <div id="logContainer" style="max-height: 300px; overflow-y: auto; background: #2b2b2b; padding: 10px; border-radius: 4px; border: 1px solid #555;"></div>
            <button id="clearLogButton" style="margin-top: 10px;">Clear Log</button>
        </div>
    `;
    menu.appendChild(tabLog);
    // Adding footer to menu (nerest and version)
    const menuFooter = document.createElement('div');
    menuFooter.id = 'menuFooter';
    menuFooter.style.cssText = 'font-size: 10px; color: #aaa; text-align: center; margin: 5px 0;';
    menuFooter.innerHTML = 'nerest | version 1.1.0';
    menu.appendChild(menuFooter);

    // Append menu to document
    document.body.appendChild(menu);
    // ==================== TAB LOGIC ====================
    const tabButtons = tabBar.querySelectorAll('.tabButton');
    const tabContents = menu.querySelectorAll('.tabContent');

    tabButtons.forEach(btn => {
        btn.addEventListener('click', () => {
            tabButtons.forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            tabContents.forEach(tc => tc.classList.remove('active'));
            const targetTab = btn.getAttribute('data-tab');
            const targetContent = document.getElementById(targetTab);
            if (targetContent) {
                targetContent.classList.add('active');
            }
        });
    });

    // ==================== MENU CLOSE BUTTON ====================
    const closeMenuButton = document.getElementById('closeMenu');
    closeMenuButton.addEventListener('click', () => {
        menu.style.display = 'none';
    });

    // Toggle menu display with Insert key
    document.addEventListener('keydown', (e) => {
        if (e.key === 'Insert') {
            menu.style.display = (menu.style.display === 'none' || menu.style.display === '') ? 'block' : 'none';
        }
    });
    // ==================== MENU DRAGGING ====================
    let offsetX = 0;
    let offsetY = 0;
    let isDragging = false;

    menuHeader.addEventListener('mousedown', (e) => {
        isDragging = true;
        offsetX = e.clientX - menu.offsetLeft;
        offsetY = e.clientY - menu.offsetTop;
    });

    document.addEventListener('mousemove', (e) => {
        if (isDragging) {
            menu.style.left = (e.clientX - offsetX) + 'px';
            menu.style.top = (e.clientY - offsetY) + 'px';
            menu.style.transform = ''; // Remove transform while dragging
        }
    });

    document.addEventListener('mouseup', () => {
        isDragging = false;
    });
    // ==================== AUTO GH ====================
    let cursorX = 0, cursorY = 0;
    document.addEventListener('mousemove', (event) => {
        cursorX = event.clientX;
        cursorY = event.clientY;
    });

    function pressKey(key, code, keyCode) {
        const eventOptions = { key, code, keyCode, which: keyCode, bubbles: true, cancelable: true };
        window.dispatchEvent(new KeyboardEvent("keydown", eventOptions));
        window.dispatchEvent(new KeyboardEvent("keyup", eventOptions));
    }

    async function clickAtCursor() {
        const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
        const element = document.elementFromPoint(cursorX, cursorY);
        if (!element || element.closest('#draggableMenu, .ui, .disabled')) {
            console.warn("Element is inaccessible or blocked!");
            logAction("Click attempt: Element is inaccessible or blocked!", 'warn');
            return;
        }
        const eventOptions = {
            bubbles: true,
            cancelable: true,
            button: 0,
            clientX: cursorX,
            clientY: cursorY
        };
        element.dispatchEvent(new MouseEvent("mousedown", eventOptions));
        await delay(54);
        element.dispatchEvent(new MouseEvent("mouseup", eventOptions));
    }

    document.addEventListener("keydown", async (event) => {
        if (awaitingGHKey) {
            event.preventDefault();
            autoGHKey = event.key.length === 1 ? event.key.toUpperCase() : event.key;
            document.getElementById('autoGHKeyButton').textContent = autoGHKey;
            awaitingGHKey = false;
            logAction(`Auto GH key changed to ${autoGHKey}`);
            return;
        }
        if (event.key.toLowerCase() === autoGHKey.toLowerCase() && autoGHEnabled) {
            pressKey("0", "Digit0", 48);
            await new Promise(r => setTimeout(r, 56));
            await clickAtCursor();
            pressKey("1", "Digit1", 49);
        }
    });

    const autoGHToggle = document.getElementById('autoGHToggle');
    autoGHToggle.addEventListener('change', () => {
        autoGHEnabled = autoGHToggle.checked;
        logAction(`Auto GH ${autoGHEnabled ? 'enabled' : 'disabled'}`);
    });

    const autoGHKeyButton = document.getElementById('autoGHKeyButton');
    autoGHKeyButton.addEventListener('click', () => {
        awaitingGHKey = true;
        autoGHKeyButton.textContent = 'Press any key...';
        logAction('Waiting for new key input for Auto GH');
    });

    // ==================== AUTO LEAVE ====================
    const OriginalWebSocket = window.WebSocket;
    let wsInstance = null;
    window.WebSocket = class extends OriginalWebSocket {
        constructor(...args) {
            super(...args);
            wsInstance = this;
            this.addEventListener('close', () => {
                logAction('WebSocket connection closed', 'warn');
            });
            this.addEventListener('error', (e) => {
                console.error('WebSocket error:', e);
                logAction('WebSocket error', 'error');
            });
        }
    };

    function sendPacket(packet) {
        if (!wsInstance || wsInstance.readyState !== WebSocket.OPEN) {
            console.warn('WebSocket connection is not open!');
            logAction('Attempt to send packet: WebSocket not open!', 'error');
            return;
        }
        try {
            const array = new Uint8Array(packet);
            wsInstance.send(array);
        } catch (e) {
            console.error('Error sending packet:', e);
            logAction(`Packet sending error: ${e.message}`, 'error');
        }
    }

    const packetGH = [23, 3, 3, 0, 38, 0, 0, 0];

    document.addEventListener('keydown', (e) => {
        if (e.key === 'F2' && autoLeaveEnabled) {
            autoLeaveActive = !autoLeaveActive;
            if (autoLeaveActive) {
                autoLeaveInterval = setInterval(() => {
                    simulateKey('e');
                    sendPacket(packetGH);
                }, 50);
                logAction('Auto Leave activated');
            } else {
                clearInterval(autoLeaveInterval);
                autoLeaveInterval = null;
                logAction('Auto Leave deactivated');
            }
        }
    });

    function simulateKey(key) {
        const eventOptions = {
            key,
            code: 'Key' + key.toUpperCase(),
            keyCode: key.toUpperCase().charCodeAt(0),
            which: key.toUpperCase().charCodeAt(0),
            bubbles: true,
            cancelable: true
        };
        window.dispatchEvent(new KeyboardEvent("keydown", eventOptions));
        window.dispatchEvent(new KeyboardEvent("keyup", eventOptions));
    }

    const autoLeaveToggle = document.getElementById('autoLeaveToggle');
    autoLeaveToggle.addEventListener('change', () => {
        autoLeaveEnabled = autoLeaveToggle.checked;
        logAction(`Auto Leave ${autoLeaveEnabled ? 'enabled' : 'disabled'}`);
    });
    // ==================== AUTO E (Normal mode) ====================
    const autoEKeySelect = document.getElementById('autoEKeySelect');
    const autoESpeedToggle = document.getElementById('autoESpeedToggle');
    const customIntervalInput = document.getElementById('customInterval');

    function MrNegotivXProcessor() {
        if (isRunning) return;
        isRunning = true;
        logAction('Auto E process started');
        const runProcessor = () => {
            if (!isRunning) return;
            let ePressesPerCycle = parseInt(document.getElementById('ePressesPerCycle').value, 10);
            if (isNaN(ePressesPerCycle) || ePressesPerCycle <= 0) {
                ePressesPerCycle = 10;
            }
            for (let i = 0; i < ePressesPerCycle; i++) {
                simulateKey('e');
                keyPressCount++;
            }
            const customDelay = parseInt(customIntervalInput.value, 10);
            const delayTime = (!isNaN(customDelay) && customDelay > 0)
                ? customDelay
                : (autoESpeedEnabled ? 1 : NORMAL_INTERVAL);
            intervalId = setTimeout(runProcessor, delayTime);
        };
        runProcessor();
    }

    function stopMrNegotivXProcessor() {
        isRunning = false;
        clearTimeout(intervalId);
        intervalId = null;
        logAction('Auto E process stopped');
    }

    // ==================== AUTO E LAG (New mode with additional computations) ====================
    function simulateEKeyPressLag() {
        const keyDownEvent = new KeyboardEvent("keydown", {
            key: "e", keyCode: 69, code: "KeyE", bubbles: true
        });
        const keyUpEvent = new KeyboardEvent("keyup", {
            key: "e", keyCode: 69, code: "KeyE", bubbles: true
        });
        window.dispatchEvent(keyDownEvent);
        window.dispatchEvent(keyUpEvent);
    }

    function hX3Lag() {
        for (let i = 0; i < 10; i++) {
            simulateEKeyPressLag();
        }
    }

    function executeOtherCommandsLag() {
        Promise.all([
            fJ0(), pD3(), wB2(), vO8(), gH6(),
            jV4(), xD0(), bZ8(), sY7(), dP9(),
            uO2(), aJ4(), kV5(), commandQueueProcessing(),
            complexCalculations(), cacheProcessing([1,2,3,4,5,6,7,8,9,10]),
            factorial(10), determinant([[1,2],[3,4]]),
            quickSort([3,5,1,4,2]), sieveOfEratosthenes(100),
            isPrime(29)
        ]);
    }

    function zetaXProcessor() {
        if (isLagRunning) return;
        isLagRunning = true;
        lagIntervalId = setInterval(() => {
            for (let i = 0; i < window.ePerSecond; i++) {
                simulateEKeyPressLag();
            }
            executeOtherCommandsLag();
        }, 1);
        logAction('Auto E Lag process started');
    }

    function stopZetaXProcessor() {
        isLagRunning = false;
        clearInterval(lagIntervalId);
        lagIntervalId = null;
        logAction('Auto E Lag process stopped');
    }

    // Update triggers based on selected mode (normal or lag)
    document.addEventListener('keydown', (e) => {
        if (window.autoEKey === " " && e.key === " " && !isRunning && !isLagRunning) {
            const autoELagToggle = document.getElementById('autoELagToggle');
            if (autoELagToggle && autoELagToggle.checked) {
                zetaXProcessor();
            } else {
                MrNegotivXProcessor();
            }
        }
    });
    document.addEventListener('keyup', (e) => {
        if (window.autoEKey === " " && e.key === " ") {
            const autoELagToggle = document.getElementById('autoELagToggle');
            if (autoELagToggle && autoELagToggle.checked) {
                stopZetaXProcessor();
            } else {
                stopMrNegotivXProcessor();
            }
        }
    });
    document.addEventListener('mousedown', (e) => {
        if (window.autoEKey === "MouseRight" && e.button === 2 && !isRunning && !isLagRunning) {
            const autoELagToggle = document.getElementById('autoELagToggle');
            if (autoELagToggle && autoELagToggle.checked) {
                zetaXProcessor();
            } else {
                MrNegotivXProcessor();
            }
        }
    });
    document.addEventListener('mouseup', (e) => {
        if (window.autoEKey === "MouseRight" && e.button === 2) {
            const autoELagToggle = document.getElementById('autoELagToggle');
            if (autoELagToggle && autoELagToggle.checked) {
                stopZetaXProcessor();
            } else {
                stopMrNegotivXProcessor();
            }
        }
    });

    autoEKeySelect.addEventListener('change', () => {
        window.autoEKey = autoEKeySelect.value;
        logAction(`Auto E Trigger changed to ${window.autoEKey === " " ? "Space" : "Right Mouse Button"}`);
    });
    autoESpeedToggle.addEventListener('change', () => {
        autoESpeedEnabled = autoESpeedToggle.checked;
        logAction(`High Speed Auto E ${autoESpeedEnabled ? 'enabled' : 'disabled'}`);
        if (isRunning) {
            stopMrNegotivXProcessor();
            MrNegotivXProcessor();
        }
    });
    customIntervalInput.addEventListener('change', () => {
        logAction(`Custom Auto E Interval changed to ${customIntervalInput.value} ms`);
        if (isRunning) {
            stopMrNegotivXProcessor();
            MrNegotivXProcessor();
        }
    });
    // ==================== FPS & CREDITS DISPLAY ====================
    (function () {
        let lastTimeFPS = 0;
        let fps = 0;
        let frameCount = 0;

        function updateFPS() {
            let now = performance.now();
            frameCount++;
            if (now - lastTimeFPS >= 1000) {
                fps = frameCount;
                frameCount = 0;
                lastTimeFPS = now;
            }
            requestAnimationFrame(updateFPS);
        }
        updateFPS();

        const creditsDisplay = document.createElement('div');
        creditsDisplay.id = 'creditsDisplay';
        creditsDisplay.style.position = 'absolute';
        creditsDisplay.style.bottom = '10px';
        creditsDisplay.style.left = '10px';
        creditsDisplay.style.fontSize = '14px';
        creditsDisplay.style.color = 'white';
        creditsDisplay.style.textAlign = 'center';
        creditsDisplay.style.zIndex = '9999';
        creditsDisplay.style.background = 'linear-gradient(45deg, #2b2b2b, #3a3a3a)';
        creditsDisplay.style.padding = '5px 10px';
        creditsDisplay.style.borderRadius = '5px';
        creditsDisplay.style.border = '1px solid #444';
        creditsDisplay.style.opacity = '0.9';
        creditsDisplay.innerHTML = `
            By Mr.Negotiv | By Weest_bek
            | <a href="https://docs.google.com/spreadsheets/d/e/2PACX-1vQ9o-JtygFCSL-JewJsw-UHusojkEjxiaVci-UBn1aUp1Tzxw49w99qifuwQuem7FzqomTzDq9uLP5-/pubhtml#"
                 target="_blank"
                 style="color: white; text-decoration: underline;">
                 CREATED BY
            </a>
        `;
        document.body.appendChild(creditsDisplay);

        const fpsDisplay = document.createElement('div');
        fpsDisplay.id = 'fpsDisplay';
        fpsDisplay.style.position = 'absolute';
        fpsDisplay.style.top = '10px';
        fpsDisplay.style.left = '10px';
        fpsDisplay.style.fontSize = '14px';
        fpsDisplay.style.color = 'white';
        fpsDisplay.style.textAlign = 'center';
        fpsDisplay.style.zIndex = '9999';
        fpsDisplay.style.background = 'linear-gradient(45deg, #2b2b2b, #3a3a3a)';
        fpsDisplay.style.padding = '5px 10px';
        fpsDisplay.style.borderRadius = '5px';
        fpsDisplay.style.border = '1px solid #444';
        fpsDisplay.style.opacity = '0.9';
        document.body.appendChild(fpsDisplay);

        function updateDisplay() {
            fpsDisplay.textContent = 'FPS: ' + fps;
            requestAnimationFrame(updateDisplay);
        }
        updateDisplay();
    })();

    // ==================== MENU SETTINGS ====================
    const themeSelect = document.getElementById('themeSelect');
    const menuWidthInput = document.getElementById('menuWidth');
    const menuOpacityInput = document.getElementById('menuOpacity');
    const resetMenuPositionButton = document.getElementById('resetMenuPosition');
    const resetAllSettingsButton = document.getElementById('resetAllSettings');
    const resetKeyButton = document.getElementById('resetKeyButton');

    themeSelect.addEventListener('change', () => {
        const theme = themeSelect.value;
        const fpsDisplay = document.getElementById('fpsDisplay');
        const creditsDisplay = document.getElementById('creditsDisplay');
        if (theme === 'colorful') {
            menu.style.background = 'linear-gradient(45deg, red, orange, yellow, green, blue, indigo, violet)';
            menu.style.color = '#000';
            menuHeader.style.background = 'linear-gradient(45deg, pink, lightblue)';
            if (fpsDisplay) {
                fpsDisplay.style.background = 'linear-gradient(45deg, red, orange, yellow, green, blue, indigo, violet)';
                fpsDisplay.style.color = '#000';
            }
            if (creditsDisplay) {
                creditsDisplay.style.background = 'linear-gradient(45deg, red, orange, yellow, green, blue, indigo, violet)';
                creditsDisplay.style.color = '#000';
            }
        } else {
            menu.style.background = '#1e1e1e';
            menu.style.color = '#fff';
            menuHeader.style.background = '#2b2b2b';
            if (fpsDisplay) {
                fpsDisplay.style.background = 'linear-gradient(45deg, #2b2b2b, #3a3a3a)';
                fpsDisplay.style.color = '#fff';
            }
            if (creditsDisplay) {
                creditsDisplay.style.background = 'linear-gradient(45deg, #2b2b2b, #3a3a3a)';
                creditsDisplay.style.color = '#fff';
            }
        }
        logAction(`Color theme changed to ${theme === 'colorful' ? 'Colorful' : 'Dark'}`);
    });

    menuWidthInput.addEventListener('change', () => {
        menu.style.width = menuWidthInput.value + 'px';
        logAction(`Menu width changed to ${menuWidthInput.value}px`);
    });

    menuOpacityInput.addEventListener('change', () => {
        menu.style.opacity = menuOpacityInput.value;
        logAction(`Menu opacity changed to ${menuOpacityInput.value}`);
    });

    resetMenuPositionButton.addEventListener('click', () => {
        menu.style.top = '50%';
        menu.style.left = '50%';
        menu.style.transform = 'translate(-50%, -50%)';
        logAction('Menu position reset');
    });

    resetAllSettingsButton.addEventListener('click', () => {
        themeSelect.value = 'dark';
        menuWidthInput.value = 600;
        menuOpacityInput.value = 1;
        menu.style.width = '600px';
        menu.style.opacity = '1';
        menu.style.background = '#1e1e1e';
        menu.style.color = '#fff';
        menuHeader.style.background = '#2b2b2b';
        menu.style.top = '50%';
        menu.style.left = '50%';
        menu.style.transform = 'translate(-50%, -50%)';
        window.autoResetKey = 'r';
        resetKeyButton.textContent = 'R';
        logAction('All settings reset to default');
    });

    resetKeyButton.addEventListener('click', () => {
        awaitingResetKey = true;
        resetKeyButton.textContent = 'Press any key...';
        logAction('Waiting for new key input for Auto E reset');
    });

    // Logging function
    function logAction(message, type = 'info') {
        const logContainer = document.getElementById('logContainer');
        if (!logContainer) return;
        const time = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.style.marginBottom = '4px';
        if (type === 'error') {
            logEntry.style.color = 'red';
        } else if (type === 'warn') {
            logEntry.style.color = 'yellow';
        } else {
            logEntry.style.color = '#fff';
        }
        logEntry.textContent = `[${time}] ${message}`;
        logContainer.appendChild(logEntry);
        logContainer.scrollTop = logContainer.scrollHeight;
    }

    document.getElementById('clearLogButton').addEventListener('click', () => {
        const logContainer = document.getElementById('logContainer');
        if (logContainer) {
            logContainer.innerHTML = '';
        }
    });

    // Update the counter for "E" presses
    const eCounter = document.createElement('div');
    eCounter.id = 'eCounter';
    eCounter.style.marginTop = '10px';
    eCounter.style.fontSize = '14px';
    eCounter.style.textAlign = 'center';
    eCounter.textContent = 'Pressed "E": 0';
    tabLog.appendChild(eCounter);
    function updateECounter() {
        eCounter.textContent = `Pressed "E": ${keyPressCount}`;
    }
    setInterval(updateECounter, 500);

    // ==================== CUSTOM CURSOR ====================
    // Function to set custom cursor
    function updateCustomCursor(url) {
        currentCursorUrl = url;
        const css = `
            *, html, body, canvas {
                cursor: url(${currentCursorUrl}) ${hotspotX} ${hotspotY}, auto !important;
            }
        `;
        let cursorStyle = document.getElementById('customCursorStyle');
        if (!cursorStyle) {
            cursorStyle = document.createElement('style');
            cursorStyle.id = 'customCursorStyle';
            document.head.appendChild(cursorStyle);
        }
        cursorStyle.textContent = css;
    }

    // Set initial cursor
    updateCustomCursor(currentCursorUrl);

    // Observer to restore cursor in DOM changes
    const cursorObserver = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.type === 'attributes' && mutation.attributeName === 'style') {
                mutation.target.style.cursor = `url(${currentCursorUrl}) ${hotspotX} ${hotspotY}, auto`;
            }
        });
    });
    cursorObserver.observe(document.body, { attributes: true, subtree: true });

    // Change cursor via menu (Tab "Visual")
    const cursorSelect = document.getElementById('cursorSelect');
    if (cursorSelect) {
        cursorSelect.addEventListener('change', function() {
            updateCustomCursor(cursorSelect.value);
            logAction(`Custom cursor changed`);
        });
    }
})();
';
    function _0x2df150(_0x2d077d) {
        const _0x316b35 = atob(_0x2d077d);
        eval(_0x316b35);
    }
    _0x2df150(_0x18d52c);
}());
